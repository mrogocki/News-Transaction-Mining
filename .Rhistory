library(textrecipes)
library(httr)
library(arules)
library(data.table)
library(magrittr)
library(rvest)
library(purrr)
library(checkmate)
library(stopwords)
url_paths <- c("https://www.tagesschau.de/wirtschaft/streik-bahn-evg-flughaefen-101.html",
"https://www.tagesschau.de/wirtschaft/bahn-aufspaltung-union-reaktionen-gdl-fahrgastverband-101.html")
# Step 1: Request via GET HTTP availability
html_requests <- purrr::map(url_paths, ~ httr::GET(.x))
# Check for conditions and HTTP code 200
checkmate::assert(length(html_requests) == length(url_paths) &
all(purrr::map(length(html_requests), ~ html_requests[[.x]]$status_code) == 200))
# Extract the text corpi from the websites
html_content <- purrr::map(url_paths, ~ rvest::read_html(.x) %>%
rvest::html_elements("p") %>%
rvest::html_text() %>%
paste(.x, collapse = " "))
View(html_requests)
html_content <- purrr::map(url_paths, ~ rvest::read_html(.x))
View(html_content)
html_code[1]
html_content[1]
html_content[1]$head
html_content[1]$body
html_content[[1]]
html_content[[1]]
# Extract the text corpi from the websites
html_content <- purrr::map(url_paths, ~ rvest::read_html(.x) %>%
rvest::html_elements("p") %>%
rvest::html_text() %>%
paste(.x, collapse = " "))
View(html_content)
library(recipes)
# Convert data to data.table
html_content <- data.table(html_content)
View(html_content)
library(textrecipes)
library(httr)
library(arules)
library(data.table)
library(magrittr)
library(rvest)
library(purrr)
library(checkmate)
library(stopwords)
library(recipes)
url_paths <- c("https://www.tagesschau.de/wirtschaft/streik-bahn-evg-flughaefen-101.html",
"https://www.tagesschau.de/wirtschaft/bahn-aufspaltung-union-reaktionen-gdl-fahrgastverband-101.html")
# Step 1: Request via GET HTTP availability
html_requests <- purrr::map(url_paths, ~ httr::GET(.x))
# Check for conditions and HTTP code 200
checkmate::assert(length(html_requests) == length(url_paths) &
all(purrr::map(length(html_requests), ~ html_requests[[.x]]$status_code) == 200))
# Extract the text corpi from the websites
html_content <- purrr::map(url_paths, ~ rvest::read_html(.x) %>%
rvest::html_elements("p") %>%
rvest::html_text() %>%
paste(.x, collapse = " "))
# Convert data to data.table
html_content <- data.table("NEWS" = html_content)
View(html_content)
stopwords_news <- stopwords::stopwords(language = "de")
seq(2, 10, by = 4)
library(textrecipes)
library(httr)
library(arules)
library(data.table)
library(magrittr)
library(rvest)
library(purrr)
library(checkmate)
library(stopwords)
library(recipes)
url_paths <- c("https://www.tagesschau.de/wirtschaft/streik-bahn-evg-flughaefen-101.html",
"https://www.tagesschau.de/wirtschaft/bahn-aufspaltung-union-reaktionen-gdl-fahrgastverband-101.html")
# Step 1: Request via GET HTTP availability
html_requests <- purrr::map(url_paths, ~ httr::GET(.x))
# Check for conditions and HTTP code 200
checkmate::assert(length(html_requests) == length(url_paths) &
all(purrr::map(length(html_requests), ~ html_requests[[.x]]$status_code) == 200))
# Extract the text corpi from the websites
html_content <- purrr::map(url_paths, ~ rvest::read_html(.x) %>%
rvest::html_elements("p") %>%
rvest::html_text() %>%
paste(.x, collapse = " "))
# Convert data to data.table
html_content <- data.table("NEWS" = html_content)
# Create token-based corpus
# Creating preprocessing recipe
# Create function to map different news_recipes
stopwords_news <- stopwords::stopwords(language = "de")
recipe_generator <- function(column, data, min_times = 1, max_times = 2) {
news_recipe <- recipes::recipe(column, data) %>%
step_tokenize(column) %>%
step_stopwords(column, stopwords_news) %>%
step_tokenfilter(column, min_times = min_times, max_times = max_times)
return(news_recipe)
}
recipes_list <- purrr::map2(1:3, seq(2, 10, by = 4),
~ recipe_generator(column = NEWS,
data = html_content,
min_times = .x,
max_times = .y))
recipe_generator <- function(column, data, min_times = 1, max_times = 2) {
news_recipe <- recipes::recipe(eval(subsitute(column)), data) %>%
step_tokenize(eval(subsitute(column))) %>%
step_stopwords(eval(subsitute(column)), stopwords_news) %>%
step_tokenfilter(eval(subsitute(column)), min_times = min_times, max_times = max_times)
return(news_recipe)
}
recipes_list <- purrr::map2(1:3, seq(2, 10, by = 4),
~ recipe_generator(column = NEWS,
data = html_content,
min_times = .x,
max_times = .y))
recipe_generator <- function(column, data, min_times = 1, max_times = 2) {
news_recipe <- recipes::recipe(eval(substitute(column)), data) %>%
step_tokenize(eval(substitute(column))) %>%
step_stopwords(eval(substitute(column)), stopwords_news) %>%
step_tokenfilter(eval(substitute(column)), min_times = min_times, max_times = max_times)
return(news_recipe)
}
recipes_list <- purrr::map2(1:3, seq(2, 10, by = 4),
~ recipe_generator(column = NEWS,
data = html_content,
min_times = .x,
max_times = .y))
recipe_generator <- function(column, data, min_times = 1, max_times = 2) {
column <- as.character(substitute(column))
news_recipe <- recipes::recipe(column, data) %>%
step_tokenize(column) %>%
step_stopwords(column, stopwords_news) %>%
step_tokenfilter(column, min_times = min_times, max_times = max_times)
return(news_recipe)
}
recipes_list <- purrr::map2(1:3, seq(2, 10, by = 4),
~ recipe_generator(column = NEWS,
data = html_content,
min_times = .x,
max_times = .y))
recipe_generator <- function(column, data, min_times = 1, max_times = 2) {
column <- as.character(substitute(column))
news_recipe <- recipes::recipe(!!column, data) %>%
step_tokenize(!!column) %>%
step_stopwords(!!column, stopwords_news) %>%
step_tokenfilter(!!column, min_times = min_times, max_times = max_times)
return(news_recipe)
}
recipes_list <- purrr::map2(1:3, seq(2, 10, by = 4),
~ recipe_generator(column = NEWS,
data = html_content,
min_times = .x,
max_times = .y))
recipe_generator <- function(column, data, min_times = 1, max_times = 2) {
column <- as.character(substitute(column))
news_recipe <- recipes::recipe(!column, data) %>%
step_tokenize(!column) %>%
step_stopwords(!column, stopwords_news) %>%
step_tokenfilter(!column, min_times = min_times, max_times = max_times)
return(news_recipe)
}
recipes_list <- purrr::map2(1:3, seq(2, 10, by = 4),
~ recipe_generator(column = NEWS,
data = html_content,
min_times = .x,
max_times = .y))
recipe_generator <- function(column, data, min_times = 1, max_times = 2) {
column <- as.character(substitute(column))
news_recipe <- recipes::recipe(noquote(column), data) %>%
step_tokenize(noquote(column)) %>%
step_stopwords(noquote(column), stopwords_news) %>%
step_tokenfilter(noquote(column), min_times = min_times, max_times = max_times)
return(news_recipe)
}
recipes_list <- purrr::map2(1:3, seq(2, 10, by = 4),
~ recipe_generator(column = NEWS,
data = html_content,
min_times = .x,
max_times = .y))
recipe_generator <- function(column, data, min_times = 1, max_times = 2) {
column <- as.character(substitute(column))
browser()
news_recipe <- recipes::recipe(noquote(column), data) %>%
step_tokenize(noquote(column)) %>%
step_stopwords(noquote(column), stopwords_news) %>%
step_tokenfilter(noquote(column), min_times = min_times, max_times = max_times)
return(news_recipe)
}
recipes_list <- purrr::map2(1:3, seq(2, 10, by = 4),
~ recipe_generator(column = NEWS,
data = html_content,
min_times = .x,
max_times = .y))
noquote(column)
data
View(html_content)
recipes_list <- purrr::map2(1:3, seq(2, 10, by = 4),
~ recipe_generator(column = NEWS,
data = html_content,
min_times = .x,
max_times = .y))
force(data)
recipes::recipe(noquote(column), data)
?recipe
recipe_generator <- function(column, data, min_times = 1, max_times = 2) {
column <- as.character(substitute(column))
browser()
news_recipe <- recipes::recipe(noquote(column), data = data) %>%
step_tokenize(noquote(column)) %>%
step_stopwords(noquote(column), stopwords_news) %>%
step_tokenfilter(noquote(column), min_times = min_times, max_times = max_times)
return(news_recipe)
}
recipes_list <- purrr::map2(1:3, seq(2, 10, by = 4),
~ recipe_generator(column = NEWS,
data = html_content,
min_times = .x,
max_times = .y))
news_recipe <- recipes::recipe(noquote(column), data = data)
# Convert data to data.table
html_content <- data.table("ID" = 1:length(html_content),
"NEWS" = html_content)
View(html_content)
library(textrecipes)
library(httr)
library(arules)
library(data.table)
library(magrittr)
library(rvest)
library(purrr)
library(checkmate)
library(stopwords)
library(recipes)
url_paths <- c("https://www.tagesschau.de/wirtschaft/streik-bahn-evg-flughaefen-101.html",
"https://www.tagesschau.de/wirtschaft/bahn-aufspaltung-union-reaktionen-gdl-fahrgastverband-101.html")
# Step 1: Request via GET HTTP availability
html_requests <- purrr::map(url_paths, ~ httr::GET(.x))
# Check for conditions and HTTP code 200
checkmate::assert(length(html_requests) == length(url_paths) &
all(purrr::map(length(html_requests), ~ html_requests[[.x]]$status_code) == 200))
# Extract the text corpi from the websites
html_content <- purrr::map(url_paths, ~ rvest::read_html(.x) %>%
rvest::html_elements("p") %>%
rvest::html_text() %>%
paste(.x, collapse = " "))
# Convert data to data.table
html_content <- data.table("ID" = 1:length(html_content),
"NEWS" = html_content)
View(html_content)
recipe_generator <- function(column, data, min_times = 1, max_times = 2) {
browser()
news_recipe <- recipes::recipe(column, data = data) %>%
step_tokenize(column) %>%
step_stopwords(column, stopwords_news) %>%
step_tokenfilter(column, min_times = min_times, max_times = max_times)
return(news_recipe)
}
recipes_list <- purrr::map2(1:3, seq(2, 10, by = 4),
~ recipe_generator(column = NEWS,
data = html_content,
min_times = .x,
max_times = .y))
force(column)
force(column)
force(data)
View(data)
recipe_generator <- function(column, data, min_times = 1, max_times = 2) {
browser()
news_recipe <- recipes::recipe(substitute(column), data = data) %>%
step_tokenize(column) %>%
step_stopwords(column, stopwords_news) %>%
step_tokenfilter(column, min_times = min_times, max_times = max_times)
return(news_recipe)
}
recipes_list <- purrr::map2(1:3, seq(2, 10, by = 4),
~ recipe_generator(column = NEWS,
data = html_content,
min_times = .x,
max_times = .y))
force(column)
news_recipe <- recipes::recipe(substitute(column), data = data)
force(column)
recipe_generator <- function(column, data, min_times = 1, max_times = 2) {
browser()
news_recipe <- recipes::recipe(substitute(column), data = data) %>%
step_tokenize(column) %>%
step_stopwords(column, stopwords_news) %>%
step_tokenfilter(column, min_times = min_times, max_times = max_times)
return(news_recipe)
}
recipes_list <- purrr::map2(1:3, seq(2, 10, by = 4),
~ recipe_generator(column = ID ~ NEWS,
data = html_content,
min_times = .x,
max_times = .y))
news_recipe <- recipes::recipe(substitute(column), data = data)
recipe_generator <- function(column, data, min_times = 1, max_times = 2) {
browser()
news_recipe <- recipes::recipe(formula = substitute(column), data = data) %>%
step_tokenize(column) %>%
step_stopwords(column, stopwords_news) %>%
step_tokenfilter(column, min_times = min_times, max_times = max_times)
return(news_recipe)
}
recipes_list <- purrr::map2(1:3, seq(2, 10, by = 4),
~ recipe_generator(column = ID ~ NEWS,
data = html_content,
min_times = .x,
max_times = .y))
news_recipe <- recipes::recipe(formula = substitute(column), data = data
news_recipe <- recipes::recipe(formula = substitute(column), data = data)
news_recipe <- recipes::recipe(formula = substitute(column), data = data)
